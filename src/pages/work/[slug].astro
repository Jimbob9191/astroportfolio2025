---
import CaseStudyLayout from '../../layouts/CaseStudyLayout.astro';
import { caseStudies } from '../../data/caseStudies';

export function getStaticPaths() {
  return caseStudies.map(project => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

const { project } = Astro.props;
const { title, slug, layout, galleryImages, research, process, metrics } = project;

const getGalleryClass = (layout: string) => {
  switch (layout) {
    case 'grid':
      return 'grid grid-cols-1 md:grid-cols-2 gap-8';
    case 'masonry':
      return 'columns-1 md:columns-2 lg:columns-3 gap-8 [&>*]:mb-8';
    case 'fullwidth':
      return 'space-y-8 [&>*]:w-full';
    default:
      return 'grid grid-cols-1 md:grid-cols-2 gap-8';
  }
};

const galleryClass = getGalleryClass(layout);
---

<CaseStudyLayout title={title} slug={slug}>
  {research && (
    <section class="mb-20">
      <h2 class="text-2xl md:text-3xl font-display font-medium mb-8">Research & Discovery</h2>
      <div class="space-y-8">
        <div>
          <h3 class="text-xl font-medium mb-4">Research Methods</h3>
          <p class="text-secondary">{research.methods.join(', ')}</p>
        </div>
        <div>
          <h3 class="text-xl font-medium mb-4">Key Findings</h3>
          <p class="text-secondary">{research.findings}</p>
        </div>
        <div>
          <h3 class="text-xl font-medium mb-4">Key Insights</h3>
          <ul class="list-disc list-inside text-secondary space-y-2">
            {research.insights.map(insight => (
              <li>{insight}</li>
            ))}
          </ul>
        </div>
      </div>
    </section>
  )}

  {process && (
    <section class="mb-20">
      <h2 class="text-2xl md:text-3xl font-display font-medium mb-8">Process</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        {process.steps.map(step => (
          <div class="bg-gray-50 p-8 rounded-lg">
            <h3 class="text-xl font-medium mb-4">{step.title}</h3>
            <p class="text-secondary">{step.description}</p>
          </div>
        ))}
      </div>
    </section>
  )}

  <section class="mb-20">
    <h2 class="text-2xl md:text-3xl font-display font-medium mb-8">Project Gallery</h2>
    <div class={galleryClass} id="gallery">
      {galleryImages.map((image) => (
        <a 
          href={image.large}
          class="block img-hover rounded-lg overflow-hidden gallery-item w-full"
          data-pswp-width={image.width}
          data-pswp-height={image.height}
        >
          <img 
            src={image.thumbnail} 
            alt={image.alt}
            class="w-full h-full object-cover"
            loading="lazy"
          />
        </a>
      ))}
    </div>
  </section>

  {metrics && project.slug !== 'metamask-onboarding' && (
    <section class="mb-20">
      <h2 class="text-2xl md:text-3xl font-display font-medium mb-8">Impact & Results</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-16">
        <div>
          <h3 class="text-xl font-medium mb-6">Before</h3>
          <dl class="space-y-4">
            {Object.entries(metrics.before).map(([key, value]) => (
              <div>
                <dt class="text-secondary">{key.replace(/([A-Z])/g, ' $1').trim()}</dt>
                <dd class="text-2xl font-display font-medium">{value}</dd>
              </div>
            ))}
          </dl>
        </div>
        <div>
          <h3 class="text-xl font-medium mb-6">After</h3>
          <dl class="space-y-4">
            {Object.entries(metrics.after).map(([key, value]) => (
              <div>
                <dt class="text-secondary">{key.replace(/([A-Z])/g, ' $1').trim()}</dt>
                <dd class="text-2xl font-display font-medium">{value}</dd>
              </div>
            ))}
          </dl>
        </div>
      </div>
    </section>
  )}
</CaseStudyLayout>

<script>
  import PhotoSwipe from 'photoswipe';
  import 'photoswipe/dist/photoswipe.css';

  const initPhotoSwipe = () => {
    // Initialize main gallery
    const gallery = document.querySelector('#gallery');
    
    if (gallery) {
      const galleryItems = gallery.querySelectorAll('.gallery-item');
      
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          
          const options = {
            gallery,
            dataSource: Array.from(galleryItems).map(galleryItem => ({
              src: galleryItem.href,
              width: parseInt(galleryItem.getAttribute('data-pswp-width')),
              height: parseInt(galleryItem.getAttribute('data-pswp-height')),
              msrc: galleryItem.querySelector('img').src
            })),
            index,
            showHideAnimationType: 'fade',
            showAnimationDuration: 300,
            hideAnimationDuration: 300,
            bgOpacity: 0.8,
            spacing: 0.1,
            allowPanToNext: true,
            maxSpreadZoom: 2,
            getDoubleTapZoom: (isMouseClick, item) => isMouseClick ? 2 : 1,
            pinchToClose: true,
            closeOnScroll: false,
            closeOnVerticalDrag: true,
            wheelToZoom: true,
            padding: { top: 20, bottom: 20, left: 20, right: 20 },
            fit: 'contain',
            pswpModule: () => import('photoswipe')
          };
          
          const lightbox = new PhotoSwipe(options);
          lightbox.init();
        });
      });
    }
    
    // Initialize problem gallery for MetaMask case study
    const problemGallery = document.querySelector('#problem-gallery');
    
    if (problemGallery) {
      const problemGalleryItems = problemGallery.querySelectorAll('.problem-gallery-item');
      
      problemGalleryItems.forEach((item, index) => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          
          const options = {
            gallery: problemGallery,
            dataSource: Array.from(problemGalleryItems).map(galleryItem => ({
              src: galleryItem.href,
              width: parseInt(galleryItem.getAttribute('data-pswp-width')),
              height: parseInt(galleryItem.getAttribute('data-pswp-height')),
              msrc: galleryItem.querySelector('img').src
            })),
            index,
            showHideAnimationType: 'fade',
            showAnimationDuration: 300,
            hideAnimationDuration: 300,
            bgOpacity: 0.8,
            spacing: 0.1,
            allowPanToNext: true,
            maxSpreadZoom: 2,
            getDoubleTapZoom: (isMouseClick, item) => isMouseClick ? 2 : 1,
            pinchToClose: true,
            closeOnScroll: false,
            closeOnVerticalDrag: true,
            wheelToZoom: true,
            padding: { top: 20, bottom: 20, left: 20, right: 20 },
            fit: 'contain',
            pswpModule: () => import('photoswipe')
          };
          
          const lightbox = new PhotoSwipe(options);
          lightbox.init();
        });
      });
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    initPhotoSwipe();
  });
</script>